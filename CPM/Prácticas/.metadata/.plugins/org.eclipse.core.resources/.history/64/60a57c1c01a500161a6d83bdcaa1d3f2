package igu;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.util.Properties;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;
import javax.swing.UIManager;

import com.jtattoo.plaf.hifi.HiFiLookAndFeel;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.JSlider;
import java.awt.Font;
import java.awt.Color;
import javax.swing.SwingConstants;
import java.awt.GridLayout;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import javax.swing.JScrollPane;
import javax.swing.border.LineBorder;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JList;

public class VentanaPrincipal extends JFrame {

	private JPanel contentPane;
	private JMenuBar menuBar;
	private JMenu mnFile;
	private JMenu mnPlay;
	private JMenu mnOptions;
	private JMenu mnHelp;
	private JMenuItem itOpen;
	private JMenuItem itExit;
	private JSeparator separator;
	private JMenuItem itNext;
	private JMenuItem itRandom;
	private JMenuItem itContents;
	private JSeparator separator_1;
	private JMenuItem itAbout;
	private JPanel pnNorte;
	private JPanel pnCentro;
	private JLabel lbLogo;
	private JSlider slider;
	private JLabel lbVol;
	private JPanel pnVol;
	private JLabel lbTxVol;
	private JPanel pnLibrary;
	private JPanel pnPlayList;
	private JLabel lbLibrary;
	private JScrollPane scListLibrary;
	private JPanel pnBtLibrary;
	private JButton btAddTo;
	private JButton btDelete;
	private JLabel lbPlayList;
	private JList list;
	private JScrollPane scListPlay;
	private JList listPlay;
	private JPanel pnBtPlay;
	private JButton btRew;
	private JButton btPlay;
	private JButton btStop;
	private JButton btForward;
	private JButton btDel;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Properties props= new Properties();
					props.put("logoString", "");
					HiFiLookAndFeel.setCurrentTheme(props);
					
					//Esto de antes de arriba sirve para quitar la publicidad de los menus.
					
					UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
					VentanaPrincipal frame = new VentanaPrincipal();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public VentanaPrincipal() {
		setIconImage(Toolkit.getDefaultToolkit().getImage(VentanaPrincipal.class.getResource("/img/logoTitulo.png")));
		setTitle("EII Media Player");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 652, 419);
		setJMenuBar(getMenuBar_1());
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));
		contentPane.add(getPnNorte(), BorderLayout.NORTH);
		contentPane.add(getPnCentro(), BorderLayout.CENTER);
		setLocationRelativeTo(null);
	}

	private JMenuBar getMenuBar_1() {
		if (menuBar == null) {
			menuBar = new JMenuBar();
			menuBar.add(getMnFile());
			menuBar.add(getMnPlay());
			menuBar.add(getMnOptions());
			menuBar.add(getMnHelp());
		}
		return menuBar;
	}
	private JMenu getMnFile() {
		if (mnFile == null) {
			mnFile = new JMenu("File");
			mnFile.setMnemonic('F');
			mnFile.add(getItOpen());
			mnFile.add(getSeparator());
			mnFile.add(getItExit());
		}
		return mnFile;
	}
	private JMenu getMnPlay() {
		if (mnPlay == null) {
			mnPlay = new JMenu("Play");
			mnPlay.setMnemonic('P');
			mnPlay.add(getItNext());
		}
		return mnPlay;
	}
	private JMenu getMnOptions() {
		if (mnOptions == null) {
			mnOptions = new JMenu("Options");
			mnOptions.setMnemonic('O');
			mnOptions.add(getItRandom());
		}
		return mnOptions;
	}
	private JMenu getMnHelp() {
		if (mnHelp == null) {
			mnHelp = new JMenu("Help");
			mnHelp.setMnemonic('H');
			mnHelp.add(getItContents());
			mnHelp.add(getSeparator_1());
			mnHelp.add(getItAbout());
		}
		return mnHelp;
	}
	private JMenuItem getItOpen() {
		if (itOpen == null) {
			itOpen = new JMenuItem("Open");
		}
		return itOpen;
	}
	private JMenuItem getItExit() {
		if (itExit == null) {
			itExit = new JMenuItem("Exit");
		}
		return itExit;
	}
	private JSeparator getSeparator() {
		if (separator == null) {
			separator = new JSeparator();
		}
		return separator;
	}
	private JMenuItem getItNext() {
		if (itNext == null) {
			itNext = new JMenuItem("Next");
		}
		return itNext;
	}
	private JMenuItem getItRandom() {
		if (itRandom == null) {
			itRandom = new JMenuItem("Random");
		}
		return itRandom;
	}
	private JMenuItem getItContents() {
		if (itContents == null) {
			itContents = new JMenuItem("Contents");
		}
		return itContents;
	}
	private JSeparator getSeparator_1() {
		if (separator_1 == null) {
			separator_1 = new JSeparator();
		}
		return separator_1;
	}
	private JMenuItem getItAbout() {
		if (itAbout == null) {
			itAbout = new JMenuItem("About");
		}
		return itAbout;
	}
	private JPanel getPnNorte() {
		if (pnNorte == null) {
			pnNorte = new JPanel();
			pnNorte.setLayout(new GridLayout(1, 3, 0, 0));
			pnNorte.add(getLbLogo());
			pnNorte.add(getSlider());
			pnNorte.add(getPnVol());
		}
		return pnNorte;
	}
	private JPanel getPnCentro() {
		if (pnCentro == null) {
			pnCentro = new JPanel();
			pnCentro.setLayout(null);
			pnCentro.add(getPnLibrary());
			pnCentro.add(getPnPlayList());
		}
		return pnCentro;
	}
	private JLabel getLbLogo() {
		if (lbLogo == null) {
			lbLogo = new JLabel("");
			lbLogo.setIcon(new ImageIcon(VentanaPrincipal.class.getResource("/img/logo.png")));
		}
		return lbLogo;
	}
	private JSlider getSlider() {
		if (slider == null) {
			slider = new JSlider();
			slider.setFocusable(false);
			slider.setPaintLabels(true);
			slider.setPaintTicks(true);
			slider.setMinorTickSpacing(10);
			slider.setMajorTickSpacing(20);
			slider.setForeground(Color.WHITE);
			slider.setFont(new Font("Dialog", Font.BOLD, 14));
		}
		return slider;
	}
	private JLabel getLbVol() {
		if (lbVol == null) {
			lbVol = new JLabel("VOL:");
			lbVol.setForeground(Color.GREEN);
			lbVol.setHorizontalAlignment(SwingConstants.CENTER);
			lbVol.setFont(new Font("Dialog", Font.BOLD, 32));
		}
		return lbVol;
	}
	private JPanel getPnVol() {
		if (pnVol == null) {
			pnVol = new JPanel();
			pnVol.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
			pnVol.add(getLbVol());
			pnVol.add(getLbTxVol());
		}
		return pnVol;
	}
	private JLabel getLbTxVol() {
		if (lbTxVol == null) {
			lbTxVol = new JLabel("50");
			lbTxVol.setForeground(Color.WHITE);
			lbTxVol.setHorizontalAlignment(SwingConstants.CENTER);
			lbTxVol.setFont(new Font("Dialog", Font.BOLD, 32));
		}
		return lbTxVol;
	}
	private JPanel getPnLibrary() {
		if (pnLibrary == null) {
			pnLibrary = new JPanel();
			pnLibrary.setBounds(10, 24, 300, 232);
			pnLibrary.setLayout(new BorderLayout(0, 0));
			pnLibrary.add(getLbLibrary(), BorderLayout.NORTH);
			pnLibrary.add(getScListLibrary(), BorderLayout.CENTER);
			pnLibrary.add(getPnBtLibrary(), BorderLayout.SOUTH);
		}
		return pnLibrary;
	}
	private JPanel getPnPlayList() {
		if (pnPlayList == null) {
			pnPlayList = new JPanel();
			pnPlayList.setBounds(320, 24, 296, 232);
			pnPlayList.setLayout(null);
			pnPlayList.add(getLbPlayList());
			pnPlayList.add(getScListPlay());
			pnPlayList.add(getPnBtPlay());
		}
		return pnPlayList;
	}
	private JLabel getLbLibrary() {
		if (lbLibrary == null) {
			lbLibrary = new JLabel("\u266A Library:");
			lbLibrary.setHorizontalAlignment(SwingConstants.LEFT);
			lbLibrary.setForeground(Color.GREEN);
			lbLibrary.setFont(new Font("Dialog", Font.BOLD, 18));
		}
		return lbLibrary;
	}
	private JScrollPane getScListLibrary() {
		if (scListLibrary == null) {
			scListLibrary = new JScrollPane();
			scListLibrary.setBorder(new LineBorder(Color.GREEN, 3));
			scListLibrary.setViewportView(getList());
//			scListLibrary.setViewportView(getListLibrary());
		}
		return scListLibrary;
	}
	private JPanel getPnBtLibrary() {
		if (pnBtLibrary == null) {
			pnBtLibrary = new JPanel();
			pnBtLibrary.setLayout(new GridLayout(1, 2, 3, 0));
			pnBtLibrary.add(getBtAddTo());
			pnBtLibrary.add(getBtDelete());
		}
		return pnBtLibrary;
	}
	private JButton getBtAddTo() {
		if (btAddTo == null) {
			btAddTo = new JButton("Add to playList");
			btAddTo.setFont(new Font("Dialog", Font.BOLD, 14));
			btAddTo.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
				}
			});
		}
		return btAddTo;
	}
	private JButton getBtDelete() {
		if (btDelete == null) {
			btDelete = new JButton("Delete");
			btDelete.setFont(new Font("Dialog", Font.BOLD, 14));
		}
		return btDelete;
	}
	private JLabel getLbPlayList() {
		if (lbPlayList == null) {
			lbPlayList = new JLabel("\u266A PlayList");
			lbPlayList.setForeground(Color.GREEN);
			lbPlayList.setFont(new Font("Dialog", Font.BOLD, 14));
			lbPlayList.setBounds(0, 0, 80, 30);
		}
		return lbPlayList;
	}
	private JList getList() {
		if (list == null) {
			list = new JList();
		}
		return list;
	}
	private JScrollPane getScListPlay() {
		if (scListPlay == null) {
			scListPlay = new JScrollPane();
			scListPlay.setBorder(new LineBorder(Color.GREEN, 3));
			scListPlay.setBounds(26, 41, 221, 133);
			scListPlay.setViewportView(getListPlay());
		}
		return scListPlay;
	}
	private JList getListPlay() {
		if (listPlay == null) {
			listPlay = new JList();
		}
		return listPlay;
	}
	private JPanel getPnBtPlay() {
		if (pnBtPlay == null) {
			pnBtPlay = new JPanel();
			pnBtPlay.setBounds(10, 200, 252, 32);
			pnBtPlay.setLayout(null);
			pnBtPlay.add(getBtRew());
			pnBtPlay.add(getBtPlay());
			pnBtPlay.add(getBtStop());
			pnBtPlay.add(getBtForward());
			pnBtPlay.add(getBtDel());
		}
		return pnBtPlay;
	}
	private JButton getBtRew() {
		if (btRew == null) {
			btRew = new JButton("\ New button");
			btRew.setBounds(0, 0, 45, 23);
		}
		return btRew;
	}
	private JButton getBtPlay() {
		if (btPlay == null) {
			btPlay = new JButton("\ New button");
			btPlay.setBounds(44, 0, 45, 23);
		}
		return btPlay;
	}
	private JButton getBtStop() {
		if (btStop == null) {
			btStop = new JButton("\ ");
			btStop.setBounds(87, 0, 38, 23);
		}
		return btStop;
	}
	private JButton getBtForward() {
		if (btForward == null) {
			btForward = new JButton("\ New button");
			btForward.setBounds(124, 0, 32, 23);
		}
		return btForward;
	}
	private JButton getBtDel() {
		if (btDel == null) {
			btDel = new JButton("\ New button");
			btDel.setBounds(158, 0, 38, 23);
		}
		return btDel;
	}
}
